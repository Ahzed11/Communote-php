# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    uploads_base_url: 'https://%env(AWS_S3_ACCESS_BUCKET)%.s3.%env(AWS_S3_REGION)%.amazonaws.com'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $uploadedAssetsBaseUrl: '%uploads_base_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'

    App\Service\UploaderHelper:
        arguments:
            - '%env(AWS_S3_ACCESS_BUCKET)%'
            - '%env(AWS_S3_ACCESS_ID)%'
            - '%env(AWS_S3_ACCESS_SECRET)%'
            - '%env(AWS_S3_REGION)%'

    App\EntityListener\CreatedAtListener:
        tags: [ doctrine.orm.entity_listener ]

    App\EntityListener\AuthorListener:
        tags: [ doctrine.orm.entity_listener ]

    App\EntityListener\SlugListener:
        tags: [ doctrine.orm.entity_listener ]